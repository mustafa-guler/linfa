var searchIndex = JSON.parse('{\
"linfa":{"doc":"<code>linfa</code> aims to provide a comprehensive toolkit to build …","t":[0,0,0,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,3,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,8,8,8,3,16,16,6,3,6,6,16,16,16,16,8,8,8,8,16,16,3,8,16,8,8,8,8,10,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11,10,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,10,11,11,11,11,11,10,11,11,4,13,13,13,13,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,8,10,10,11,8,3,8,3,8,8,8,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,8,8,16,16,16,8,8,8,10,10,10,10,10,10],"n":["composing","correlation","dataset","error","hyperparams","metrics","prelude","traits","MultiClassModel","MultiTargetModel","borrow","borrow","borrow_mut","borrow_mut","default_target","default_target","deref","deref","deref_mut","deref_mut","drop","drop","from","from","from_iter","from_iter","init","init","into","into","new","new","platt_scaling","predict","predict","predict","predict","predict","predict","predict","predict","predict_inplace","predict_inplace","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","LineSearchNotConverged","MaxIterReached","MaxIterZero","MinStepNegative","Platt","PlattNewtonResult","PlattParams","SigmaNegative","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","calibrate","clone","clone_into","default","default_target","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","fmt","fmt","from","from","from","init","init","init","into","into","into","maxiter","minstep","params","platt_newton_method","platt_predict","predict","predict","predict","predict","predict_inplace","serialize","sigma","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","PearsonCorrelation","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","from_dataset","get_coeffs","get_p_values","init","into","to_string","try_from","try_into","type_id","vzip","0","AsProbabilities","AsTargets","AsTargetsMut","CountedTargets","D","D","Dataset","DatasetBase","DatasetPr","DatasetView","Elem","Elem","Elem","Elem","Float","FromTargetArray","Label","Labels","Lapack","Owned","Pr","Records","View","WithLapack","WithLapackData","WithoutLapack","WithoutLapackData","as_multi_target_probabilities","as_multi_targets","as_multi_targets","as_multi_targets","as_multi_targets_mut","as_multi_targets_mut","as_multi_targets_mut","bootstrap","bootstrap_features","bootstrap_samples","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","clone","clone_into","confusion_matrix","cross_validate","cross_validate_multi","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","even","feature_iter","feature_names","fmt","fold","from","from","from","from","from","from","init","init","init","into","into","into","iter_fold","label_count","label_count","label_count","label_frequencies","label_frequencies_with_mask","label_set","labels","map_targets","new","new","new_targets","new_targets","new_targets_view","new_targets_view","nfeatures","nfeatures","nsamples","nsamples","ntargets","one_vs_all","partial_cmp","pearson_correlation","pearson_correlation_with_p_value","records","records","roc","sample_chunks","sample_iter","shuffle","silhouette_score","split_with_ratio","split_with_ratio","split_with_ratio","target_iter","targets","targets","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_single_target","try_single_target_mut","type_id","type_id","type_id","view","vzip","vzip","vzip","weight_for","weights","weights","with_feature_names","with_labels","with_lapack","with_lapack","with_lapack","with_records","with_targets","with_weights","without_lapack","without_lapack","without_lapack","Error","MismatchedShapes","MultipleTargets","NdShape","NotConverged","NotEnoughSamples","Parameters","Platt","Priors","Result","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","init","into","serialize","source","to_owned","to_string","try_from","try_into","type_id","vzip","Checked","Error","UncheckedHyperParams","check","check_ref","check_unwrap","BinaryClassification","ConfusionMatrix","MultiTargetRegression","ReceiverOperatingCharacteristic","SilhouetteScore","SingleTargetRegression","ToConfusionMatrix","accuracy","area_under_curve","borrow","borrow","borrow_mut","borrow_mut","confusion_matrix","deref","deref","deref_mut","deref_mut","drop","drop","explained_variance","explained_variance","explained_variance","explained_variance","f1_score","f_score","fmt","from","from","get_curve","get_thresholds","init","init","into","into","max_error","max_error","max_error","max_error","mcc","mean_absolute_error","mean_absolute_error","mean_absolute_error","mean_absolute_error","mean_squared_error","mean_squared_error","mean_squared_error","mean_squared_error","mean_squared_log_error","mean_squared_log_error","mean_squared_log_error","mean_squared_log_error","median_absolute_error","median_absolute_error","median_absolute_error","median_absolute_error","precision","r2","r2","r2","r2","recall","roc","silhouette_score","split_one_vs_all","split_one_vs_one","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Fit","IncrementalFit","Object","ObjectIn","ObjectOut","Predict","PredictInplace","Transformer","default_target","fit","fit_with","predict","predict_inplace","transform"],"q":["linfa","","","","","","","","linfa::composing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa::composing::platt_scaling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa::correlation","","","","","","","","","","","","","","","","","","linfa::dataset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa::hyperparams","","","","","","linfa::metrics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa::traits","","","","","","","","","","","","",""],"d":["Composition models","Correlation analysis for dataset features","Datasets","Error types in Linfa","","Common metrics functions for classification and regression","Linfa prelude.","Provide traits for different classes of algorithms","Merge models with binary to multi-class classification","Merge models with single target to multi-target models","","","","","","","","","","","","","","","","","","","","","","Create a wrapper model from a list of single-target models","Implement Platt calibration with Newton method","","","","","","","","","","","","","","","","","","","","","","","Fitted Platt model","Platt Newton’s method errors","Parameters for Platt’s Newton method","","","","","","","","Calibrate another model with Platt scaling","","","","","","","","","","","","","","","","","","","","","","","","","","Set the maximum number of iterations in the optimization …","Set the minimum stepsize in the line search","Create default parameter set for the Platt scaling …","Run Newton’s method to find optimal <code>A</code> and <code>B</code> values","Predict a probability with the sigmoid function","","","","","","","Set the Hessian’s sigma value","","","","","","","","","","","","","","","Pearson Correlation Coefficients (or Bivariate …","","","","","","","","Calculate the Pearson Correlation Coefficients and …","Return the Pearson’s Correlation Coefficients","Return the p values supporting the null-hypothesis","","","","","","","","","Convert to probability matrix","Return a reference to single or multiple target variables","","Targets with precomputed, counted labels","","","Dataset","DatasetBase","DatasetPr","DatasetView","","","","","Floating point numbers","Helper trait to construct counted labels","Discrete labels","Get the labels in all targets","","","Probability types","Record trait","","Add the Lapack bound to the floating point of a dataset","","Remove the Lapack bound to the floating point of a dataset","","","Returns a view on targets as two-dimensional array","","","Returns a mutable view on targets as two-dimensional array","","","Apply bootstrapping for samples and features","Apply feature bootstrapping","Apply sample bootstrapping","","","","","","","","","","","Cross validation for single target algorithms","Cross validation for multi-target algorithms","","","","","","","","","","","","","","Iterate over features","Returns feature names","","Performs K-folding on the dataset. The dataset is divided …","","","","","","","","","","","","","Allows to perform k-folding cross validation on fittable …","","","","Calculates label frequencies from a dataset","Calculates label frequencies from a dataset while masking …","","","Map targets with a function <code>f</code>","Create a new dataset from records and targets","","Create self object from new target array","","","","","","","","Return the number of targets in the dataset","Produce N boolean targets from multi-class targets","","Calculate the Pearson Correlation Coefficients from a …","Calculate the Pearson Correlation Coefficients and …","Return records of a dataset","","","","Iterate over observations","Produces a shuffled version of the current Dataset.","","Split dataset into two disjoint chunks","Split dataset into two disjoint chunks","Split dataset into two disjoint chunks","Iterate over targets","Returns reference to targets","","","","","","","","","","Convert to single target, fails for more than one target","Convert to single target, fails for more than one target","","","","Creates a view of a dataset","","","","Return a single weight","Returns optionally weights","","Updates the feature names of a dataset","Transforms the input dataset by keeping only those …","","Add trait bound <code>Lapack</code> and <code>Scalar</code> to NdArray’s floating …","Add trait bound <code>Lapack</code> and <code>Scalar</code> to NdArray’s floating …","Updates the records of a dataset","Updates the targets of a dataset","Updates the weights of a dataset","","Add trait bound <code>Lapack</code> and <code>Scalar</code> to NdArray’s floating …","Add trait bound <code>Lapack</code> and <code>Scalar</code> to NdArray’s floating …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The checked hyperparameters","Error type resulting from failed hyperparameter checking","A set of hyperparameters whose values have not been …","Checks the hyperparameters and returns the checked …","Checks the hyperparameters and returns a reference to the …","Calls <code>check()</code> and unwraps the result","Classification for binary-labels","Confusion matrix for multi-label evaluation","Regression metrices trait for multiple targets.","A Receiver Operating Characteristic for binary-label …","Evaluates the quality of a clustering using euclidean …","Regression metrices trait for single targets.","Classification for multi-label evaluation","Accuracy score","Returns the Area-Under-Curve metric","","","","","","","","","","","","Same as R-Squared but with biased variance","Same as R-Squared but with biased variance","Same as R-Squared but with biased variance","Same as R-Squared but with biased variance","F1-score, this is the F-beta-score for beta=1","F-beta-score","","","","Returns the true-positive, false-positive curve","Returns the threshold corresponding to each point","","","","","Maximal error between two continuous variables","Maximal error between two continuous variables","Maximal error between two continuous variables","Maximal error between two continuous variables","Matthew Correlation Coefficients","Mean error between two continuous variables","Mean error between two continuous variables","Mean error between two continuous variables","Mean error between two continuous variables","Mean squared error between two continuous variables","Mean squared error between two continuous variables","Mean squared error between two continuous variables","Mean squared error between two continuous variables","Mean squared log error between two continuous variables","Mean squared log error between two continuous variables","Mean squared log error between two continuous variables","Mean squared log error between two continuous variables","Median absolute error between two continuous variables","Median absolute error between two continuous variables","Median absolute error between two continuous variables","Median absolute error between two continuous variables","Precision score, the number of correct classifications …","R squared coefficient, is the proportion of the variance …","R squared coefficient, is the proportion of the variance …","R squared coefficient, is the proportion of the variance …","R squared coefficient, is the proportion of the variance …","Recall score, the number of correct classifications in …","","Evaluates the quality of a clustering.","Split confusion matrix in N one-vs-all binary confusion …","Split confusion matrix in N*(N-1)/2 one-vs-one binary …","","","","","","","","","Fittable algorithms","Incremental algorithms","","","","Predict with model","Predict with model into a mutable reference of targets.","Transformation algorithms","Create targets that <code>predict_inplace</code> works with.","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,1,1,1,1,2,2,2,2,1,2,1,2,1,2,1,2,1,2,3,3,3,3,0,0,0,3,4,5,3,4,5,3,5,3,3,5,4,4,5,3,4,5,3,3,4,5,3,3,3,4,5,3,4,5,3,4,5,3,5,5,4,0,0,4,4,4,4,4,3,5,3,3,4,5,3,4,5,3,4,5,3,4,5,3,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,0,0,0,0,8,9,0,0,0,0,10,11,12,13,0,0,0,0,14,15,0,0,15,0,0,0,0,16,11,17,18,12,17,18,17,17,17,17,18,7,17,18,7,14,7,7,17,17,17,7,17,18,7,7,17,18,7,17,18,7,7,7,17,17,7,17,17,17,17,17,18,7,17,18,7,17,18,7,17,13,17,18,17,17,13,13,17,17,18,15,18,15,18,10,17,10,17,17,17,7,17,17,17,17,17,17,17,17,17,17,17,19,17,17,17,17,7,17,18,7,17,18,7,11,12,17,18,7,17,17,18,7,17,17,17,17,17,20,8,8,17,17,17,21,9,9,0,22,22,22,22,22,22,22,22,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,0,23,23,23,0,0,0,0,0,0,0,24,25,24,25,24,25,26,24,25,24,25,24,25,27,27,28,28,24,24,24,24,25,25,25,24,25,24,25,27,27,28,28,24,27,27,28,28,27,27,28,28,27,27,28,28,27,27,28,28,24,27,27,28,28,24,29,30,24,24,24,25,24,25,24,25,24,25,0,0,31,32,32,0,0,0,33,31,32,34,33,35],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["arraybase",3]],["array1",6]],[[["arraybase",3]],["array2",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["vec",3]]],[[["vec",3],["box",3]]],null,[[["datasetbase",3]],["datasetbase",3]],[[["arraybase",3]]],[[["datasetbase",3]]],[[["arraybase",3],["dim",3]],[["arraybase",3],["datasetbase",3]]],[[["datasetbase",3]]],[[["arraybase",3]]],[[["arraybase",3],["dim",3]],[["arraybase",3],["datasetbase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["arraybase",3],["array1",6]]],[[["arraybase",3],["array2",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["datasetbase",3]],[["platt",3],["result",4],["plattnewtonresult",4]]],[[],["plattnewtonresult",4]],[[]],[[]],[[["arraybase",3]],[["pr",3],["array1",6]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[],["plattparams",3]],[[["bool",15],["plattparams",3],["arrayview1",6],["arrayview1",6],["float",8]],[["plattnewtonresult",4],["result",4]]],[[["float",8]],["pr",3]],[[["arraybase",3],["dim",3]],[["arraybase",3],["datasetbase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["datasetbase",3]]],[[["arraybase",3]]],[[["arraybase",3],["array1",6]]],[[],["result",4]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["usize",15],["option",4],["datasetbase",3]]],[[],["array1",6]],[[],[["option",4],["array1",6]]],[[],["usize",15]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["cowarray",6],["pr",3],["ix3",6]]],[[],["arrayview2",6]],[[],["arrayview2",6]],[[],["arrayview2",6]],[[],["arrayviewmut2",6]],[[],["arrayviewmut2",6]],[[],["arrayviewmut2",6]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["numcast",8]]],[[],["pr",3]],[[]],[[["datasetbase",3]],[["confusionmatrix",3],["result",6]]],[[["usize",15]],[["result",4],["arraybase",3]]],[[["usize",15]],[["result",4],["array2",6]]],[[],["pr",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["f32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[],["pr",3]],[[],[["datasetiter",3],["arraybase",3]]],[[],[["string",3],["vec",3]]],[[["formatter",3]],["result",6]],[[["usize",15]],["vec",3]],[[]],[[]],[[["arraybase",3]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15],["fn",8]]],[[],[["vec",3],["hashmap",3]]],[[],[["vec",3],["hashmap",3]]],[[],[["vec",3],["hashmap",3]]],[[],[["hashmap",3],["f32",15]]],[[],[["hashmap",3],["f32",15]]],[[],[["vec",3],["hashset",3]]],[[],["vec",3]],[[["fnmut",8]],[["array2",6],["datasetbase",3]]],[[["intotargets",8]],["datasetbase",3]],[[]],[[["array2",6]]],[[["array2",6]]],[[["arrayview2",6]]],[[["arrayview2",6]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["result",6],["vec",3]]],[[["pr",3]],[["option",4],["ordering",4]]],[[],["pearsoncorrelation",3]],[[["usize",15]],["pearsoncorrelation",3]],[[]],null,[[["datasetbase",3]],[["receiveroperatingcharacteristic",3],["result",6]]],[[["usize",15]],["chunksiter",3]],[[],["iter",3]],[[],[["array2",6],["datasetbase",3]]],[[],["result",6]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[],[["datasetiter",3],["arraybase",3]]],[[]],null,[[],[["array2",6],["datasetbase",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",6],["arrayview1",6]]],[[],[["result",6],["arrayviewmut1",6]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["arrayview2",6],["datasetbase",3]]],[[]],[[]],[[]],[[["usize",15]],["f32",15]],[[],["option",4]],null,[[["vec",3],["string",3],["into",8]],["datasetbase",3]],[[],[["array2",6],["countedtargets",3],["datasetbase",3]]],[[],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[["records",8]],[["records",8],["datasetbase",3]]],[[],["datasetbase",3]],[[["array1",6],["f32",15]],["datasetbase",3]],[[],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["error",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["shapeerror",3]]],[[],["usize",15]],[[]],[[],["result",4]],[[],[["error",8],["option",4]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[]],null,null,null,null,null,null,null,[[],["f32",15]],[[],["f32",15]],[[]],[[]],[[]],[[]],[[],[["confusionmatrix",3],["result",6]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",6]],[[],["result",6]],[[],[["result",6],["array1",6]]],[[],[["result",6],["array1",6]]],[[],["f32",15]],[[["f32",15]],["f32",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["vec",3]],[[],[["f32",15],["vec",3]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[],[["result",6],["array1",6]]],[[],[["result",6],["array1",6]]],[[],["f32",15]],[[],["result",6]],[[],["result",6]],[[],[["result",6],["array1",6]]],[[],[["result",6],["array1",6]]],[[],["result",6]],[[],["result",6]],[[],[["result",6],["array1",6]]],[[],[["result",6],["array1",6]]],[[],["result",6]],[[],["result",6]],[[],[["result",6],["array1",6]]],[[],[["result",6],["array1",6]]],[[],["result",6]],[[],["result",6]],[[],[["result",6],["array1",6]]],[[],[["result",6],["array1",6]]],[[],["f32",15]],[[],["result",6]],[[],["result",6]],[[],[["result",6],["array1",6]]],[[],[["result",6],["array1",6]]],[[],["f32",15]],[[],[["receiveroperatingcharacteristic",3],["result",6]]],[[],["result",6]],[[],[["confusionmatrix",3],["vec",3]]],[[],[["confusionmatrix",3],["vec",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[["datasetbase",3]],["result",4]],[[["datasetbase",3]],["result",4]],[[]],[[]],[[]]],"p":[[3,"MultiClassModel"],[3,"MultiTargetModel"],[4,"PlattNewtonResult"],[3,"Platt"],[3,"PlattParams"],[3,"PearsonCorrelation"],[3,"Pr"],[8,"WithLapackData"],[8,"WithoutLapackData"],[8,"Records"],[8,"AsTargets"],[8,"AsTargetsMut"],[8,"Labels"],[8,"Float"],[8,"FromTargetArray"],[8,"AsProbabilities"],[3,"DatasetBase"],[3,"CountedTargets"],[6,"Dataset"],[8,"WithLapack"],[8,"WithoutLapack"],[4,"Error"],[8,"UncheckedHyperParams"],[3,"ConfusionMatrix"],[3,"ReceiverOperatingCharacteristic"],[8,"ToConfusionMatrix"],[8,"SingleTargetRegression"],[8,"MultiTargetRegression"],[8,"BinaryClassification"],[8,"SilhouetteScore"],[8,"Fit"],[8,"IncrementalFit"],[8,"PredictInplace"],[8,"Predict"],[8,"Transformer"]]},\
"linfa_bayes":{"doc":"Naive Bayes","t":[13,4,3,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BaseCrate","BayesError","GaussianNbParams","Result","Stats","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","drop","drop","fit","fit_with","fmt","fmt","fmt","from","from","from","from","init","init","into","into","params","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","var_smoothing","vzip","vzip"],"q":["linfa_bayes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","An error when using a GaussianNB classifier","Gaussian Naive Bayes (GaussianNB)","","Error when performing Max operation on data","","","","","","","","","","","","Fit the model","Incrementally fit on a batch of samples","","","","","","","","","","","","Create new GaussianNB model with default values for its …","","","","","","","","","Specifies the portion of the largest variance of all the …","",""],"i":[1,0,0,0,1,1,2,1,2,2,1,2,1,2,1,2,2,2,1,1,2,1,1,1,2,1,2,1,2,2,1,1,1,2,1,2,1,2,2,1,2],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["minmaxerror",4]]],[[]],[[["error",4]]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],[["option",4],["error",8]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["f64",15]]],[[]],[[]]],"p":[[4,"BayesError"],[3,"GaussianNbParams"]]},\
"linfa_clustering":{"doc":"<code>linfa-clustering</code> aims to provide pure Rust implementations…","t":[3,3,3,4,3,3,4,13,13,3,4,4,3,4,4,13,13,13,13,13,3,13,4,13,3,4,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,4,3,13,13,13,3,13,13,13,13,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AppxDbscan","AppxDbscanHyperParams","AppxDbscanLabeler","AppxDbscanParamsError","Dbscan","DbscanHyperParams","DbscanParamsError","EmptyCluster","Full","GaussianMixtureModel","GmmCovarType","GmmError","GmmHyperParams","GmmInitMethod","IncrKMeansError","InertiaError","InvalidParams","InvalidParams","InvalidValue","InvalidValue","KMeans","KMeans","KMeansError","KMeansError","KMeansHyperParams","KMeansInit","KMeansPara","KMeansParamsError","KMeansPlusPlus","LinalgError","LinfaError","LinfaError","LinfaError","LowerBoundError","MaxIterations","MinMaxError","MinPoints","MinPoints","NClusters","NRuns","NotConverged","NotConverged","NotConverged","Optics","OpticsAnalysis","OpticsError","OpticsHyperParams","Precomputed","Random","Random","Sample","Slack","Tolerance","Tolerance","Tolerance","UncheckedAppxDbscanHyperParams","UncheckedDbscanHyperParams","UncheckedKMeansHyperParams","appx_tolerance","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","centroids","centroids","check","check","check","check_ref","check_ref","check_ref","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cluster_count","core_distance","covariance_type","covariances","default_target","default_target","default_target","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dist_fn","dist_fn","dist_fn","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fit","fit","fit_with","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","generate_blob","generate_blobs","get_minimum_points","get_tolerance","index","index","inertia","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init_method","init_method","init_method","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","iter","labels","max_n_iterations","max_n_iterations","max_n_iterations","means","minimum_points","minimum_points","n_clusters","n_clusters","n_runs","n_runs","n_runs","ne","ne","ne","ne","ne","ne","new","new","new","new","nn_algo","nn_algo","params","params","params","params","params","params_with","params_with","params_with_rng","precisions","predict","predict","predict","predict","predict","predict","predict","predict","predict_inplace","predict_inplace","predict_inplace","reachability_distance","reg_covariance","rng","rng","slack","slack","source","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","tolerance","tolerance","tolerance","tolerance","tolerance","tolerance","tolerance","tolerance","transform","transform","transform","transform","transform","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate","validate","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weights","with_covariance_type","with_init_method","with_max_n_iterations","with_n_runs","with_reg_covariance","with_rng","with_tolerance"],"q":["linfa_clusteringd":["DBSCAN (Density-based Spatial Clustering of Applications …","The set of hyperparameters that can be specified for the …","Struct that labels a set of points according to the …","","DBSCAN (Density-based Spatial Clustering of Applications …","The set of hyperparameters that can be specified for the …","","When a cluster has no more data point while fitting GMM","each component has its own general covariance matrix","Gaussian Mixture Model (GMM) aims at clustering a dataset …","A specifier for the type of the relation between …","An error when modeling a GMM algorithm","The set of hyperparameters that can be specified for the …","A specifier for the method used for the initialization of …","","When inertia computation fails","When any of the hyperparameters are set the wrong value","When any of the hyperparameters are set the wrong value","When any of the hyperparameters are set the wrong value","When any of the hyperparameters are set the wrong value","K-means clustering aims to partition a set of unlabeled …","GMM fitting algorithm is initalized with the esult of the …","An error when modeling a KMeans algorithm","When initial KMeans fails","The set of hyperparameters that can be specified for the …","Specifies centroid initialization algorithm for KMeans.","K-means|| algorithm, a parallelized version of K-means++. …","An error when fitting with an invalid hyperparameter","K-means++ algorithm. Using this over random …","Errors encountered during linear algebra operations","","","","When lower bound computation fails","","","","","","","When fitting EM algorithm does not converge","When fitting algorithm does not converge","When the distance between the old and new centroids …","OPTICS (Ordering Points To Identify Clustering Structure) …","The analysis from running OPTICS on a dataset, this …","An error when performing OPTICS Analysis","The set of hyperparameters that can be specified for the …","Precomputed list of centroids, represented as an array of …","GMM fitting algorithm is initialized randomly.","Pick random points as centroids.","This struct represents a data point in the dataset with it…","","","","","Helper struct for building a set of Approximated DBSCAN …","Helper struct for building a set of DBSCAN hyperparameters","An helper struct used to construct a set of valid …","Get the approximate tolerance (<code>tolerance * (1 + slack)</code>) …","Extracts a slice containing all samples in the dataset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the set of centroids as a 2-dimensional matrix …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the number of training points belonging to each …","The distance to the nth closest point where n is the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Distance metric used in the DBSCAN calculation","Set the distance metric","Returns the distance metric","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given an input matrix <code>observations</code>, with shape …","Performs a single batch update of the Mini-Batch K-means …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate <code>blob_size</code> data points (a “blob”) around …","Given an input matrix <code>blob_centroids</code>, with shape …","Minimum number of a points in a neighborhood around a …","Two points are considered neighbors if the euclidean …","","Index of the sample in the dataset.","Return the sum of distances between each training point …","","","","","","","","","","","","","","","","","","","","","","","","","","","Change the value of <code>init</code>","","Cluster initialization strategy","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the samples in the dataset","Gives the labels of every point provided in input to the …","Change the value of <code>max_n_iterations</code>","","We exit the training loop when the number of training …","","Distance between points for them to be considered …","Minimum number of neighboring points a point needs to …","","The number of clusters we will be looking for in the …","Change the value of <code>n_runs</code>","","The final results will be the best output of n_runs …","","","","","","","Runs the Approximated DBSCAN algorithm on the provided …","<code>new</code> lets us configure our training algorithm parameters:","","Minimum number of neighboring points a point needs to …","Nearest neighbour algorithm used for range queries","Set the nearest neighbour algorithm to be used","Configures the hyperparameters with the minimum number of …","Configures the hyperparameters with the minimum number of …","","","","Configures the hyperparameters with the minimum number of …","","","","","","","","","","","","","Given one input observation, return the index of its …","Given an input matrix <code>observations</code>, with shape …","The reachability distance of a sample is the distance …","","","Returns the random generator","Minimum number of neighboring points a point needs to …","Set the slack","","","","","","","","","","","","","","","","","","","","","","","","","Change the value of <code>tolerance</code>","Distance between points for them to be considered …","Set the tolerance","Nearest neighbour algorithm used for range queries","Set the tolerance","","The training is considered complete if the euclidean …","Distance between points for them to be considered …","","","","","Given an input matrix <code>observations</code>, with shape …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the covariance type.","Set the method used to initialize the weights, the means …","Set the number of EM iterations to perform.","Set the number of initializations to perform. The best …","Non-negative regularization added to the diagonal of …","","Set the convergence threshold. EM iterations will stop …"],"i":[0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,3,3,4,1,5,0,6,0,1,0,0,7,0,7,1,1,3,4,1,8,1,9,10,8,8,1,3,4,0,0,0,0,7,6,7,0,9,9,10,8,0,0,0,11,12,13,14,15,11,16,9,17,18,19,10,20,1,2,6,21,22,8,3,4,23,7,24,12,25,5,26,13,14,15,11,16,9,17,18,19,10,20,1,2,6,21,22,8,3,4,23,7,24,12,25,5,26,20,22,14,16,19,14,16,19,15,11,17,20,2,6,21,22,23,7,24,12,25,26,15,11,17,20,2,6,21,22,23,7,24,12,25,26,22,25,21,20,20,22,22,13,14,15,11,16,9,17,18,19,10,20,1,2,6,21,22,8,3,4,23,7,24,12,25,5,26,13,14,15,11,16,9,17,18,19,10,20,1,2,6,21,22,8,3,4,23,7,24,12,25,5,26,18,19,23,13,14,15,11,16,9,17,18,19,10,20,1,2,6,21,22,8,3,4,23,7,24,12,25,5,26,15,11,17,20,2,22,23,7,24,26,21,23,23,15,11,16,9,9,17,18,19,10,10,20,1,1,2,6,21,22,8,8,3,3,4,4,23,7,24,12,25,5,5,26,13,14,15,11,16,9,17,18,19,10,20,1,1,1,1,1,2,6,21,22,8,3,3,3,4,4,4,23,7,24,12,25,5,26,0,0,26,26,12,25,22,13,14,15,11,16,9,17,18,19,10,20,1,2,6,21,22,8,3,4,23,7,24,12,25,5,26,14,21,23,13,14,15,11,16,9,17,18,19,10,20,1,2,6,21,22,8,3,4,23,7,24,12,25,5,26,12,13,14,21,23,20,11,18,21,23,14,21,23,11,20,22,23,7,26,13,14,21,26,18,19,15,17,20,22,24,17,22,22,20,20,20,20,20,22,22,22,22,20,22,22,25,21,21,23,11,16,1,3,4,15,11,17,20,2,6,21,22,23,7,24,12,25,26,9,10,1,8,3,4,5,14,11,16,18,19,21,23,26,11,11,18,18,22,26,13,14,15,11,16,9,17,18,19,10,20,1,2,6,21,22,8,3,4,23,7,24,12,25,5,26,13,14,15,11,16,9,17,18,19,10,20,1,2,6,21,22,8,3,4,23,7,24,12,25,5,26,13,14,15,11,16,9,17,18,19,10,20,1,2,6,21,22,8,3,4,23,7,24,12,25,5,26,21,26,13,14,15,11,16,9,17,18,19,10,20,1,2,6,21,22,8,3,4,23,7,24,12,25,5,26,20,21,21,21,21,21,21,21],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["array2",6]],[[],["array2",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["appxdbscan",3]],[[],["appxdbscanhyperparams",3]],[[],["dbscan",3]],[[]],[[],["gmmcovartype",4]],[[],["gmminitmethod",4]],[[],["gmmhyperparams",3]],[[],["kmeans",3]],[[],["kmeanshyperparams",3]],[[],["kmeansinit",4]],[[],["optics",3]],[[],["opticsanalysis",3]],[[],["sample",3]],[[],["opticshyperparams",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["array1",6]],[[],["option",4]],[[],["gmmcovartype",4]],[[],["array3",6]],[[["arraybase",3]],[["usize",15],["array1",6]]],[[["arraybase",3]],[["usize",15],["array1",6]]],[[["arraybase",3]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["appxdbscan",3]],["bool",15]],[[["appxdbscanhyperparams",3]],["bool",15]],[[["dbscan",3]],["bool",15]],[[["gaussianmixturemodel",3]],["bool",15]],[[["gmmcovartype",4]],["bool",15]],[[["kmeans",3]],["bool",15]],[[["kmeanshyperparams",3]],["bool",15]],[[["kmeansinit",4]],["bool",15]],[[["optics",3]],["bool",15]],[[["opticshyperparams",3]],["bool",15]],[[["datasetbase",3]],[["result",4],["gmmerror",4]]],[[["datasetbase",3]],[["kmeanserror",4],["result",4]]],[[["datasetbase",3]],[["incrkmeanserror",4],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["minmaxerror",4]]],[[["error",4]]],[[["kmeanserror",4]]],[[["linalgerror",4]]],[[]],[[]],[[]],[[]],[[]],[[["kmeansparamserror",4]]],[[["error",4]]],[[]],[[]],[[["error",4]]],[[["kmeansparamserror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["arraybase",3],["usize",15]],[["array2",6],["f64",15]]],[[["usize",15],["arraybase",3]],[["array2",6],["f64",15]]],[[],["usize",15]],[[],["f64",15]],[[]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["kmeansinit",4]]],[[],["gmminitmethod",4]],[[],["kmeansinit",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["sample",3],["iter",3]]],[[],["array1",6]],[[["u64",15]]],[[],["u64",15]],[[],["u64",15]],[[],["array2",6]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[],["u64",15]],[[],["usize",15]],[[["appxdbscanhyperparams",3]],["bool",15]],[[["gaussianmixturemodel",3]],["bool",15]],[[["kmeans",3]],["bool",15]],[[["kmeanshyperparams",3]],["bool",15]],[[["kmeansinit",4]],["bool",15]],[[["opticshyperparams",3]],["bool",15]],[[["appxdbscanhyperparams",3],["arrayview2",6]],["appxdbscanlabeler",3]],[[["usize",15]]],[[["usize",15]],[["gmmhyperparams",3],["isaac64rng",3]]],[[["usize",15]]],[[]],[[]],[[["usize",15]],[["float",8],["uncheckedappxdbscanhyperparams",3]]],[[["usize",15]],[["uncheckeddbscanhyperparams",3],["float",8],["commonnearestneighbour",4],["l2dist",3]]],[[["usize",15]],[["gmmhyperparams",3],["isaac64rng",3]]],[[["usize",15]],[["uncheckedkmeanshyperparams",3],["isaac64rng",3],["l2dist",3]]],[[["usize",15]],["opticshyperparams",3]],[[["float",8],["usize",15],["nearestneighbour",8],["distance",8]],[["uncheckeddbscanhyperparams",3],["float",8],["nearestneighbour",8],["distance",8]]],[[["usize",15],["rng",8]],[["uncheckedkmeanshyperparams",3],["rng",8]]],[[["usize",15],["rng",8]],[["l2dist",3],["uncheckedkmeanshyperparams",3],["rng",8]]],[[],["array3",6]],[[["arraybase",3]]],[[["dim",3],["arraybase",3]],[["datasetbase",3],["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["datasetbase",3]]],[[["datasetbase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["dim",3],["arraybase",3]],[["datasetbase",3],["arraybase",3]]],[[["arraybase",3]]],[[["array1",6],["arraybase",3]]],[[["arraybase",3],["usize",15]]],[[["arraybase",3],["array1",6]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["error",8]]],[[],[["option",4],["error",8]]],[[],[["option",4],["error",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]]],[[["datasetbase",3],["arraybase",3]],[["array1",6],["arraybase",3],["datasetbase",3]]],[[["arraybase",3]],[["option",4],["array1",6]]],[[["arraybase",3]],[["option",4],["array1",6]]],[[["datasetbase",3],["arraybase",3]],[["array1",6],["arraybase",3],["datasetbase",3]]],[[["arraybase",3]],["array1",6]],[[["ix2",6],["arrayview",6]],[["result",4],["opticsanalysis",3],["opticserror",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",4],["gmmerror",4]]],[[],[["opticserror",4],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["array1",6]],[[["gmmcovartype",4]]],[[["gmminitmethod",4]]],[[["u64",15]]],[[["u64",15]]],[[]],[[["clone",8],["rng",8]],[["gmmhyperparams",3],["clone",8],["rng",8]]],[[]]],"p":[[4,"GmmError"],[4,"GmmCovarType"],[4,"KMeansError"],[4,"IncrKMeansError"],[4,"OpticsError"],[4,"GmmInitMethod"],[4,"KMeansInit"],[4,"KMeansParamsError"],[4,"AppxDbscanParamsError"],[4,"DbscanParamsError"],[3,"AppxDbscanHyperParams"],[3,"OpticsAnalysis"],[3,"AppxDbscanLabeler"],[3,"UncheckedKMeansHyperParams"],[3,"AppxDbscan"],[3,"UncheckedAppxDbscanHyperParams"],[3,"Dbscan"],[3,"DbscanHyperParams"],[3,"UncheckedDbscanHyperParams"],[3,"GaussianMixtureModel"],[3,"GmmHyperParams"],[3,"KMeans"],[3,"KMeansHyperParams"],[3,"Optics"],[3,"Sample"],[3,"OpticsHyperParams"]]},\
"linfa_datasets":{"doc":"Datasets","t":[5,5,5,5],"n":["diabetes","iris","linnerud","winequality"],"q":["linfa_datasets","","",""],"d":["Read in the diabetes dataset from dataset path","Read in the iris-flower dataset from dataset path.","Read in the physical exercise dataset from dataset path.","Read in the winequality dataset from dataset path"],"i":[0,0,0,0],"f":[[[],[["f64",15],["dataset",6]]],[[],[["dataset",6],["f64",15],["usize",15]]],[[],[["f64",15],["dataset",6]]],[[],[["dataset",6],["f64",15],["usize",15]]]],"p":[]},\
"linfa_elasticnet":{"doc":"Elastic Net","t":[13,3,3,4,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11],"n":["BaseCrate","ElasticNet","ElasticNetParams","Error","IllConditioned","NotEnoughSamples","Result","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compute_intercept","confidence_95th","default","default_target","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","duality_gap","fit","fmt","fmt","from","from","from","from","init","init","init","intercept","into","into","into","l1_ratio","l1_ratio","lasso","max_iterations","max_iterations","n_steps","new","parameters","params","penalty","penalty","predict","predict","predict","predict","predict_inplace","ridge","source","to_owned","to_string","tolerance","tolerance","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate_params","vzip","vzip","vzip","with_intercept","with_intercept","z_score"],"q":["linfa_elasticnet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Elastic Net model","Linear regression with both L1 and L2 regularization","","The input is singular","The input has not enough samples","","","","","","","","","","Compute the intercept as the mean of <code>y</code> and center <code>y</code> if an …","Calculate the confidence level","","","","","","","","","","","","Get the duality gap at the end of the optimization …","Fit an elastic net model given a feature matrix <code>x</code> and a …","","","","","","","","","","Get the fitted intercept, 0. if no intercept was fitted","","","","Set l1_ratio parameter of the elastic net. Controls how …","","Create a lasso model","Set the maximum number of iterations for the optimization …","","Get the number of steps taken in optimization algorithm","Create default elastic net hyper parameters","Get the fitted parameters","Create a default elastic net model","Set the overall parameter penalty parameter of the …","","","","","","Given an input matrix <code>X</code>, with shape …","Create a ridge model","","","","Set the tolerance which is the minimum absolute change in …","","","","","","","","","","","Validate the hyper parameters","","","","Configure the elastic net model to fit an intercept. …","","Calculate the Z score"],"i":[1,0,0,0,1,1,0,2,3,1,2,3,1,1,1,2,3,2,3,2,3,1,2,3,1,2,3,1,3,2,1,1,2,3,1,1,2,3,1,3,2,3,1,2,2,3,2,2,3,2,3,3,2,2,3,3,3,3,3,3,1,1,1,2,2,2,3,1,2,3,1,2,3,1,2,2,3,1,2,2,3],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["error",4]],[[]],[[["arrayview1",6]]],[[],[["result",6],["array1",6]]],[[]],[[["arraybase",3]],["array1",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["datasetbase",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["error",4]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],null,[[],["elasticnetparams",3]],[[["u32",15]]],null,[[],["u32",15]],[[],["elasticnetparams",3]],[[],["array1",6]],[[],["elasticnetparams",3]],[[]],null,[[["datasetbase",3]],["datasetbase",3]],[[["datasetbase",3]]],[[["arraybase",3],["dim",3]],[["arraybase",3],["datasetbase",3]]],[[["arraybase",3]]],[[["arraybase",3],["array1",6]]],[[],["elasticnetparams",3]],[[],[["error",8],["option",4]]],[[]],[[],["string",3]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",6]],[[]],[[]],[[]],[[["bool",15]]],null,[[],[["result",6],["array1",6]]]],"p":[[4,"Error"],[3,"ElasticNetParams"],[3,"ElasticNet"]]},\
"linfa_hierarchical":{"doc":"Hierarchical Clustering","t":[13,13,13,3,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Average","Centroid","Complete","HierarchicalCluster","Median","Method","Single","Ward","Weighted","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","fmt","from","from","from_str","init","init","into","into","into_method_chain","max_distance","mul_acc","num_clusters","to_owned","transform","transform","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_method"],"q":["linfa_hierarchical","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Assigns the average dissimilarity between all pairs of …","Assigns the centroid dissimilarity between clusters.","Assigns the maximum dissimilarity between all pairs of …","Agglomerative hierarchical clustering","Assigns the median dissimilarity between clusters.","A method for computing the dissimilarities between …","Assigns the minimum dissimilarity between all pairs of …","Assigns the Ward dissimilarity between clusters.","Assigns the weighted dissimilarity between clusters.","","","","","","","","","","","","","","","","","","","","","","","Convert this linkage method into a nearest neighbor chain …","Stop merging when a certain distance is reached","","Stop merging when a certain number of clusters are reached","","Perform hierarchical clustering of a similarity matrix","Perform hierarchical clustering of a similarity matrix","","","","","","","","","Select a merging method"],"i":[1,1,1,0,1,0,1,1,1,2,1,2,1,1,1,2,2,1,2,1,2,1,1,1,2,1,1,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,2,1,2],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["method",4]],[[]],[[],["hierarchicalcluster",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["method",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[["str",15]],[["error",4],["result",4],["method",4]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],[["methodchain",4],["option",4]]],[[],["hierarchicalcluster",3]],[[]],[[["usize",15]],["hierarchicalcluster",3]],[[]],[[["kernel",6]],[["datasetbase",3],["kernel",6],["vec",3]]],[[["datasetbase",3],["kernel",6]],[["datasetbase",3],["kernel",6],["vec",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["method",4]],["hierarchicalcluster",3]]],"p":[[4,"Method"],[3,"HierarchicalCluster"]]},\
"linfa_ica":{"doc":"Independent Component Analysis (ICA)","t":[0,0,4,13,13,13,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["error","fast_ica","FastIcaError","InvalidValue","Linalg","LinfaError","NotEnoughSamples","Result","SvdDecomposition","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","init","into","source","to_string","try_from","try_into","type_id","vzip","Cube","Exp","FastIca","FittedFastIca","GFunc","Logcosh","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default_target","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fit","fmt","fmt","fmt","from","from","from","gfunc","init","init","init","into","into","into","max_iter","ncomponents","new","predict","predict","predict","predict","predict_inplace","random_state","tol","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["linfa_ica","","linfa_ica::error","","","","","","","","","","","","","","","","","","","","","","","","","linfa_ica::fast_ica","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Fast algorithm for Independent Component Analysis (ICA)","An error when modeling FastICA algorithm","When any of the hyperparameters are set the wrong value","Errors encountered during linear algebra operations","","When there are no samples in the provided dataset","","If we fail to compute any components of the SVD …","","","","","","","","","","","","","","","","","","","","","Fast Independent Component Analysis (ICA)","Fitted FastICA model for recovering the sources","Some standard non-linear functions","","","","","","","","","","","","","","","","","","","Fit the model","","","","","","","G function used in the approximation to neg-entropy, …","","","","","","","Set maximum number of iterations during fit","Set the number of components to use, if not set all are …","Create new FastICA algorithm with default values for its …","","","","","Recover the sources","Set seed for random number generator for reproducible …","Set tolerance on upate at each iteration","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,0,0,2,3,4,2,3,4,2,3,4,3,4,2,3,4,2,3,4,2,3,3,4,2,3,4,2,3,3,4,2,3,4,2,3,3,3,4,4,4,4,4,3,3,3,4,2,3,4,2,3,4,2,3,4,2],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["linalgerror",4]]],[[["error",4]]],[[]],[[],["usize",15]],[[]],[[],[["error",8],["option",4]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["array2",6]],["array2",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["datasetbase",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["gfunc",4]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["datasetbase",3]],["datasetbase",3]],[[["datasetbase",3]]],[[["arraybase",3],["dim",3]],[["arraybase",3],["datasetbase",3]]],[[["arraybase",3]]],[[["array2",6],["array2",6]]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]]],"p":[[4,"FastIcaError"],[4,"GFunc"],[3,"FastIca"],[3,"FittedFastIca"]]},\
"linfa_kernel":{"doc":"Kernel methods","t":[13,13,6,3,4,3,4,6,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,16,8,4,13,11,11,10,11,11,10,10,11,11,11,11,10,10,10,10,11,11,11,11],"n":["Dense","Gaussian","Kernel","KernelBase","KernelMethod","KernelParams","KernelType","KernelView","Linear","Polynomial","Sparse","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","column","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","diagonal","distance","dot","drop","drop","drop","drop","fmt","from","from","from","from","init","init","init","init","inner","inner","into","into","into","into","is_linear","is_linear","kind","method","method","new","new","nfeatures","nsamples","params","size","sum","to_owned","to_owned","to_owned","to_owned","to_upper_triangle","transform","transform","transform","transform","transform","transform","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","view","view","vzip","vzip","vzip","vzip","Dense","Elem","Inner","KernelInner","Sparse","borrow","borrow_mut","column","deref","deref_mut","diagonal","dot","drop","from","init","into","is_dense","size","sum","to_upper_triangle","try_from","try_into","type_id","vzip"],"q":["linfa_kernel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_kernel::inner","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Gaussian(eps): exp(-norm(x - x’)/eps)","Type definition of Kernel that owns its inner matrix","A generic kernel","The inner product definition used by a kernel.","Defines the set of parameters needed to build a kernel","Kernel representation, can be either dense or sparse","Type definition of Kernel that borrows its inner matrix","Euclidean inner product","Polynomial(constant, degree):  …","A sparse kernel requires to define a number of neighbours …","","","","","","","","","","","","","Getter for a column of the kernel matrix","","","","","","","","","Getter for the elements in the diagonal of the kernel …","","Performs the matrix product between the kernel matrix and …","","","","","","","","","","","","","","","","","","","","Whether the kernel is a linear kernel","","Setter for <code>kind</code>. Can be chained with <code>method</code> and <code>transform</code>.","Setter for <code>method</code>. Can be chained with <code>kind</code> and <code>transform</code>.","The inner product that will be used by the kernel","","","","","Generates the default set of parameters for building a …","Gives the size of the side of the square kernel matrix","Sums all elements in the same row of the kernel matrix","","","","","Getter for the data in the upper triangle of the kernel …","Builds a new Dataset with the kernel as the records and …","Builds a kernel from a view of the input data.","Builds a kernel from a view of the input data.","Builds a kernel from a view of the input data.","Builds a new Dataset with the kernel as the records and …","Builds a new Dataset with the kernel as the records and …","","","","","","","","","","","","","Gives a KernelView which has a view on the original kernel…","Gives a KernelView which has a view on the original kernel…","","","","","","","Specifies the methods an inner matrix of a kernel must be …","Allows a kernel to have either a dense or a sparse inner …","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,0,0,0,0,0,0,2,2,1,3,4,1,2,3,4,1,2,1,2,1,2,3,3,4,1,2,3,4,1,2,3,2,3,3,4,1,2,2,3,4,1,2,3,4,1,2,0,3,3,4,1,2,3,2,4,4,3,3,5,3,3,3,3,3,3,6,1,2,3,4,4,4,4,4,4,3,4,1,2,3,4,1,2,3,4,1,2,3,5,3,4,1,2,7,8,0,0,7,7,7,8,7,7,8,8,7,7,7,7,8,8,8,8,7,7,7,7],"f":[null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["kerneltype",4]],[[],["kernelmethod",4]],[[]],[[]],[[["usize",15]],["vec",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["array1",6]],[[["arrayview1",6]]],[[["arrayview2",6]],["array2",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["kerneltype",4]],["kernelparams",3]],[[["kernelmethod",4]],["kernelparams",3]],null,[[["kernelmethod",4],["arrayview2",6],["kerneltype",4]],["kernel",6]],[[["kernelmethod",4],["arrayview2",6],["kerneltype",4]],["kernel",6]],[[],["usize",15]],[[],["usize",15]],[[],["kernelparams",3]],[[],["usize",15]],[[],["array1",6]],[[],["kernel",6]],[[],["kernel",6]],[[]],[[]],[[],["vec",3]],[[["datasetbase",3]],[["datasetbase",3],["kernel",6]]],[[["array2",6]],["kernel",6]],[[["arrayview2",6]],["kernel",6]],[[["arrayview2",6]],["kernel",6]],[[["array2",6],["datasetbase",3]],[["datasetbase",3],["kernel",6]]],[[["datasetbase",3]],[["datasetbase",3],["kernel",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["kernelview",6]],[[],["kernelview",6]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[["usize",15]],["vec",3]],[[["usize",15]]],[[["usize",15]]],[[],["array1",6]],[[["arrayview2",6]],["array2",6]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["array1",6]],[[],["vec",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[4,"KernelType"],[4,"KernelMethod"],[3,"KernelBase"],[3,"KernelParams"],[6,"Kernel"],[6,"KernelView"],[4,"KernelInner"],[8,"Inner"]]},\
"linfa_linear":{"doc":"<code>linfa-linear</code> aims to provide pure Rust implementations of …","t":[13,13,3,3,8,13,13,4,3,4,13,13,13,13,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Argmin","BaseCrate","FittedLinearRegression","FittedTweedieRegressor","Float","Identity","LinalgError","LinearError","LinearRegression","Link","Log","Logit","NotEnoughSamples","NotEnoughTargets","Result","TweedieRegressor","alpha","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","coef","default","default","default_target","default_target","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","fit","fit","fit_intercept","fmt","fmt","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","intercept","intercept","into","into","into","into","into","into","inverse","inverse_derviative","link","link","link_derivative","max_iter","new","new","params","power","predict","predict","predict","predict","predict","predict","predict","predict","predict_inplace","predict_inplace","serialize","serialize","serialize","serialize","serialize","source","to_owned","to_string","tol","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","with_intercept","with_intercept_and_normalize"],"q":["linfa_linear","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Errors encountered when using argmin’s solver","","A fitted linear regression model which can be used for …","Fitted Tweedie regressor model for scoring","","The identity link function <code>g(x)=x</code>","","An error when modeling a Linear algorithm","An ordinary least squares linear regression model.","Link functions used by GLM","The log link function <code>g(x)=log(x)</code>","The logit link function <code>g(x)=logit(x)</code>","","","","Generalized Linear Model (GLM) with a Tweedie distribution","Constant that multiplies with the penalty term and thus …","","","","","","","","","","","","","","","Estimated coefficients for the linear predictor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fit a linear regression model given a feature matrix <code>X</code> …","Specifies whether a bias or intercept should be added to …","","","","","","","","","","","","","","","","","","Get the fitted intercept, 0. if no intercept was fitted","Intercept or bias added to the linear model","","","","","","","Computes the inverse link function <code>h(linear predictor)</code>","Computes the derivative of the inverse link function …","Compute the link function <code>g(ypred)</code>","The link function of the GLM, for mapping from linear …","Computes the derivative of the link <code>g\'(ypred)</code>","Maximum number of iterations for the LBFGS solver","","Create a default linear regression model.","Get the fitted parameters","The power determines the underlying target distribution","","","","","","","","","Predict the target","Given an input matrix <code>X</code>, with shape …","","","","","","","","","Stopping criterion for the LBFGS solver","","","","","","","","","","","","","","","","","","","","","","","","","Configure the linear regression model to fit an intercept.…","Configure the linear regression model to fit an intercept …"],"i":[1,1,0,0,0,2,1,0,0,0,2,2,1,1,0,0,3,1,2,3,4,5,6,1,2,3,4,5,6,2,2,4,3,5,4,6,1,2,3,4,5,6,1,2,3,4,5,6,2,3,4,5,6,1,2,3,4,5,6,3,5,3,1,1,1,1,1,1,2,3,4,5,6,1,2,3,4,5,6,6,4,1,2,3,4,5,6,2,2,2,3,2,3,3,5,6,3,4,4,4,4,6,6,6,6,4,6,2,3,4,5,6,1,2,1,3,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,5,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["link",4]],[[]],null,[[]],[[]],[[["arraybase",3]],["array1",6]],[[["arraybase",3]],["array1",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["bool",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["linalgerror",4]]],[[["error",4]]],[[["error",3]]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["array1",6]],[["array1",6],["float",8]]],[[["array1",6]],[["array1",6],["float",8]]],[[["array1",6]],[["array1",6],["float",8]]],[[["link",4]]],[[["array1",6]],[["array1",6],["float",8]]],[[["usize",15]]],[[]],[[],["linearregression",3]],[[],["array1",6]],[[["f64",15]]],[[["dim",3],["arraybase",3]],[["arraybase",3],["datasetbase",3]]],[[["datasetbase",3]]],[[["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["datasetbase",3]],["datasetbase",3]],[[["datasetbase",3]]],[[["arraybase",3]]],[[["dim",3],["arraybase",3]],[["arraybase",3],["datasetbase",3]]],[[["arraybase",3],["array1",6]]],[[["arraybase",3],["array1",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["error",8],["option",4]]],[[]],[[],["string",3]],[[["f64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",15]]],[[]]],"p":[[4,"LinearError"],[4,"Link"],[3,"TweedieRegressor"],[3,"FittedTweedieRegressor"],[3,"LinearRegression"],[3,"FittedLinearRegression"]]},\
"linfa_logistic":{"doc":"Logistic Regression","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,13,13,13,13,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FittedLogisticRegression","LogisticRegression","alpha","borrow","borrow","borrow_mut","borrow_mut","default","default_target","deref","deref","deref_mut","deref_mut","drop","drop","eq","error","fit","fmt","from","from","gradient_tolerance","init","init","initial_params","intercept","into","into","max_iterations","ne","new","params","predict","predict","predict","predict","predict_inplace","predict_probabilities","set_threshold","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_intercept","ArgMinError","Error","InvalidGradientTolerance","InvalidInitialParametersGuess","InvalidInitialParametersGuessSize","InvalidValues","LinfaError","MismatchedShapes","Result","WrongNumberOfClasses","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","init","into","source","to_string","try_from","try_into","type_id","vzip"],"q":["linfa_logistic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_logistic::error","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A fitted logistic regression which can make predictions","A two-class logistic regression model.","Set the normalization parameter <code>alpha</code> used for L2 …","","","","","","","","","","","","","","","Given a 2-dimensional feature matrix array <code>x</code> with shape …","","","","Configure the minimum change to the gradient to continue …","","","Configure the initial parameters from where the …","","","","Configure the maximum number of iterations that the …","","Creates a new LogisticRegression with default …","","","","","","Given a feature matrix, predict the classes learned when …","Given a feature matrix, predict the probabilities that a …","Set the probability threshold for which the ‘positive’…","","","","","","","","","Configure if an intercept should be fitted, defaults to …","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,2,1,2,1,2,1,2,1,2,1,2,2,0,1,2,1,2,1,1,2,1,2,1,2,1,2,1,2,2,2,2,2,2,2,2,1,2,1,2,1,2,1,2,1,3,0,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[null,null,[[],["logisticregression",3]],[[]],[[]],[[]],[[]],[[],["logisticregression",3]],[[["arraybase",3]],["array1",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["fittedlogisticregression",3]],["bool",15]],null,[[["datasetbase",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["logisticregression",3]],[[],["usize",15]],[[],["usize",15]],[[["array1",6]],["logisticregression",3]],[[]],[[]],[[]],[[["u64",15]],["logisticregression",3]],[[["fittedlogisticregression",3]],["bool",15]],[[],["logisticregression",3]],[[],["array1",6]],[[["datasetbase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["arraybase",3],["dim",3]],[["datasetbase",3],["arraybase",3]]],[[["arraybase",3]]],[[["array1",6],["arraybase",3]]],[[["arraybase",3]],["array1",6]],[[],["fittedlogisticregression",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["bool",15]],["logisticregression",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",4]]],[[["error",3]]],[[]],[[],["usize",15]],[[]],[[],[["option",4],["error",8]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[3,"LogisticRegression"],[3,"FittedLogisticRegression"],[4,"Error"]]},\
"linfa_nn":{"doc":"<code>linfa-nn</code> provides Rust implementations of common spatial …","t":[3,13,3,4,4,13,3,13,3,3,13,3,8,8,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,8,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BallTree","BallTree","BallTreeIndex","BuildError","CommonNearestNeighbour","EmptyLeaf","KdTree","KdTree","KdTreeIndex","LinearSearch","LinearSearch","LinearSearchIndex","NearestNeighbour","NearestNeighbourIndex","NnError","WrongDimension","ZeroDimension","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","distance","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_batch","from_batch_with_leaf_size","from_batch_with_leaf_size","from_batch_with_leaf_size","from_batch_with_leaf_size","from_batch_with_leaf_size","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","k_nearest","k_nearest","k_nearest","k_nearest","new","new","new","new","new","new","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","within_range","within_range","within_range","within_range","Distance","L1Dist","L2Dist","LInfDist","LpDist","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","dist_to_rdist","dist_to_rdist","distance","distance","distance","distance","distance","drop","drop","drop","drop","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","ne","rdist_to_dist","rdist_to_dist","rdistance","rdistance","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":["linfa_nnlinfa_nn::distance","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Implementation of ball tree, a space partitioning data …","Ball Tree","Spatial indexing structure created by <code>BallTree</code>","Error returned when building nearest neighbour indices","Enum that dispatches to one of the crate’s …","","Implementation of K-D tree, a fast space-partitioning …","KD Tree","Spatial indexing structure created by <code>KdTree</code>","Implementation of linear search, which is the simplest …","Linear search","Spatial indexing structure created by <code>LinearSearch</code>","Nearest neighbour algorithm builds a spatial index …","A spatial index structure over a set of points, created …","Error returned when performing spatial queries on nearest …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds a spatial index using a default leaf size. See …","Builds a spatial index using a MxN two-dimensional array …","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>k</code> points in the index that are the closest to …","","","","Creates a <code>BallTreeIndex</code> using the K-D construction …","Creates an instance of <code>BallTree</code>","Creates a new <code>KdTreeIndex</code>","Creates an instance of <code>KdTree</code>","Creates a new <code>LinearSearchIndex</code>","Creates an instance of <code>LinearSearch</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns all the points in the index that are within the …","","","","A distance function that can be used in spatial …","L1 or Manhattan distance","L2 or Euclidean distance","L-infinte or Chebyshev distance","L-p or Minkowsky distance","","","","","","","","","","","","","","","","","","","","","","","","","Converts the result of <code>distance</code> to <code>rdistance</code>","","Computes the distance between two points. For most …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the result of <code>rdistance</code> to <code>distance</code>","","A faster version of the distance metric that keeps the …","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,0,0,2,0,1,0,0,1,0,0,0,0,3,2,4,5,6,7,8,9,2,3,1,4,5,6,7,8,9,2,3,1,5,7,9,5,7,9,5,7,9,4,5,6,7,8,9,2,3,1,4,5,6,7,8,9,2,3,1,0,4,5,6,7,8,9,2,3,1,4,5,6,7,8,9,2,2,3,3,1,4,5,6,7,8,9,2,3,3,1,10,10,5,7,9,1,4,5,6,7,8,9,2,3,1,4,5,6,7,8,9,2,3,1,11,4,6,8,4,5,6,7,8,9,5,7,9,2,3,4,5,6,7,8,9,2,3,1,4,5,6,7,8,9,2,3,1,4,5,6,7,8,9,2,3,1,4,5,6,7,8,9,2,3,1,11,4,6,8,0,0,0,0,0,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15,16,13,16,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15,15,16,13,16,13,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["balltree",3]],[[],["kdtree",3]],[[],["linearsearch",3]],[[]],[[]],[[]],[[],["balltree",3]],[[],["kdtree",3]],[[],["linearsearch",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["errorkind",4]]],[[]],[[["arraybase",3],["float",8],["distance",8]],[["builderror",4],["box",3],["result",4]]],[[["arraybase",3],["float",8],["usize",15],["distance",8]],[["builderror",4],["box",3],["result",4]]],[[["arraybase",3],["float",8],["usize",15],["distance",8]],[["builderror",4],["box",3],["result",4]]],[[["arraybase",3],["float",8],["usize",15],["distance",8]],[["builderror",4],["box",3],["result",4]]],[[["arraybase",3],["float",8],["usize",15],["distance",8]],[["builderror",4],["box",3],["result",4]]],[[["arraybase",3],["float",8],["usize",15],["distance",8]],[["builderror",4],["box",3],["result",4]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["arrayview1",6]],[["result",4],["nnerror",4],["vec",3]]],[[["usize",15],["arrayview1",6]],[["result",4],["nnerror",4],["vec",3]]],[[["usize",15],["arrayview1",6]],[["result",4],["nnerror",4],["vec",3]]],[[["usize",15],["arrayview1",6]],[["result",4],["nnerror",4],["vec",3]]],[[["arraybase",3],["usize",15]],[["result",4],["builderror",4]]],[[]],[[["arraybase",3],["usize",15]],[["result",4],["builderror",4]]],[[]],[[["arraybase",3]],[["result",4],["builderror",4]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["arrayview1",6]],[["result",4],["nnerror",4],["vec",3]]],[[["arrayview1",6]],[["result",4],["nnerror",4],["vec",3]]],[[["arrayview1",6]],[["result",4],["nnerror",4],["vec",3]]],[[["arrayview1",6]],[["result",4],["nnerror",4],["vec",3]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["l1dist",3]],[[],["l2dist",3]],[[],["linfdist",3]],[[],["lpdist",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["dimension",8],["arrayview",6]]],[[["dimension",8],["arrayview",6]]],[[["dimension",8],["arrayview",6]]],[[["dimension",8],["arrayview",6]]],[[["dimension",8],["arrayview",6]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["l1dist",3]],["bool",15]],[[["l2dist",3]],["bool",15]],[[["linfdist",3]],["bool",15]],[[["lpdist",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["lpdist",3]],["bool",15]],[[]],[[]],[[["dimension",8],["arrayview",6]]],[[["dimension",8],["arrayview",6]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]]],"p":[[4,"CommonNearestNeighbour"],[4,"BuildError"],[4,"NnError"],[3,"BallTreeIndex"],[3,"BallTree"],[3,"KdTreeIndex"],[3,"KdTree"],[3,"LinearSearchIndex"],[3,"LinearSearch"],[8,"NearestNeighbour"],[8,"NearestNeighbourIndex"],[3,"L1Dist"],[3,"L2Dist"],[3,"LInfDist"],[3,"LpDist"],[8,"Distance"]]},\
"linfa_pls":{"doc":"Partial Least Squares","t":[13,8,13,13,13,13,3,3,3,3,4,3,3,3,3,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BadComponentNumberError","Float","LinalgError","LinfaError","MinMaxError","NotEnoughSamplesError","PlsCanonical","PlsCanonicalParams","PlsCca","PlsCcaParams","PlsError","PlsRegression","PlsRegressionParams","PlsSvd","PlsSvdParams","PowerMethodNotConvergedError","Result","algorithm","algorithm","algorithm","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","coefficients","coefficients","coefficients","default","default_target","default_target","default_target","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","fit","fit","fit","fit","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","inverse_transform","inverse_transform","inverse_transform","loadings","loadings","loadings","max_iterations","max_iterations","max_iterations","new","params","params","params","params","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict_inplace","predict_inplace","predict_inplace","rotations","rotations","rotations","scale","scale","scale","scale","source","to_owned","to_string","tolerance","tolerance","tolerance","transform","transform","transform","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weights","weights","weights","weights"],"q":["linfa_plsd":["","Add Scalar and Lapack trait bounds to the common Float …","","","","","","","","","","","","","","","","Set the algorithm used to estimate the first singular …","Set the algorithm used to estimate the first singular …","Set the algorithm used to estimate the first singular …","","","","","","","","","","","","","","","","","","","","","The coefficients of the linear model such that Y is …","The coefficients of the linear model such that Y is …","The coefficients of the linear model such that Y is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Transform the given dataset in the projected space back …","Transform the given dataset in the projected space back …","Transform the given dataset in the projected space back …","Loadings of records and targets","Loadings of records and targets","Loadings of records and targets","Set the maximum number of iterations of the power method …","Set the maximum number of iterations of the power method …","Set the maximum number of iterations of the power method …","","","","","","","","","","","","","","","","","","Given an input matrix <code>X</code>, with shape …","Given an input matrix <code>X</code>, with shape …","Given an input matrix <code>X</code>, with shape …","Projection matrices used to transform records and targets","Projection matrices used to transform records and targets","Projection matrices used to transform records and targets","","Set whether to scale the dataset","Set whether to scale the dataset","Set whether to scale the dataset","","","","Set the tolerance used as convergence criteria in the …","Set the tolerance used as convergence criteria in the …","Set the tolerance used as convergence criteria in the …","","Apply dimension reduction to the given dataset","Apply dimension reduction to the given dataset","Apply dimension reduction to the given dataset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Singular vectors of the cross-covariance matrices","Singular vectors of the cross-covariance matrices","Singular vectors of the cross-covariance matrices"],"i":[1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,2,3,4,5,1,6,2,7,3,8,4,9,5,1,6,2,7,3,8,4,9,6,6,7,8,9,6,7,8,9,5,1,6,2,7,3,8,4,9,5,1,6,2,7,3,8,4,9,5,1,6,2,7,3,8,4,9,6,2,3,4,1,1,6,5,1,1,1,1,6,2,7,3,8,4,9,5,1,6,2,7,3,8,4,9,5,1,6,2,7,3,8,4,9,7,8,9,7,8,9,2,3,4,6,5,7,8,9,7,7,7,7,8,8,8,8,9,9,9,9,7,8,9,7,8,9,6,2,3,4,1,6,1,2,3,4,5,7,8,9,5,1,6,2,7,3,8,4,9,5,1,6,2,7,3,8,4,9,5,1,6,2,7,3,8,4,9,5,1,6,2,7,3,8,4,9,5,7,8,9],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["algorithm",4]]],[[["algorithm",4]]],[[["algorithm",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["plssvdparams",3]],[[]],[[],["array2",6]],[[],["array2",6]],[[],["array2",6]],[[]],[[["arraybase",3]],["array2",6]],[[["arraybase",3]],["array2",6]],[[["arraybase",3]],["array2",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["minmaxerror",4]]],[[["error",4]]],[[["linalgerror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["datasetbase",3],["arraybase",3]],[["array2",6],["datasetbase",3]]],[[["datasetbase",3],["arraybase",3]],[["array2",6],["datasetbase",3]]],[[["datasetbase",3],["arraybase",3]],[["array2",6],["datasetbase",3]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["plssvdparams",3]],[[["usize",15]],["plssvdparams",3]],[[["usize",15]],["plsregressionparams",3]],[[["usize",15]],["plscanonicalparams",3]],[[["usize",15]],["plsccaparams",3]],[[["arraybase",3]]],[[["arraybase",3],["dim",3]],[["datasetbase",3],["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["datasetbase",3]]],[[["datasetbase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["arraybase",3],["dim",3]],[["datasetbase",3],["arraybase",3]]],[[["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["arraybase",3],["dim",3]],[["datasetbase",3],["arraybase",3]]],[[["arraybase",3]]],[[["datasetbase",3]]],[[["arraybase",3],["array2",6]]],[[["arraybase",3],["array2",6]]],[[["arraybase",3],["array2",6]]],[[]],[[]],[[]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[],[["error",8],["option",4]]],[[]],[[],["string",3]],[[]],[[]],[[]],[[["datasetbase",3],["arraybase",3]],[["array2",6],["datasetbase",3]]],[[["datasetbase",3],["arraybase",3]],[["array2",6],["datasetbase",3]]],[[["datasetbase",3],["arraybase",3]],[["array2",6],["datasetbase",3]]],[[["datasetbase",3],["arraybase",3]],[["array2",6],["datasetbase",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"PlsError"],[3,"PlsRegressionParams"],[3,"PlsCanonicalParams"],[3,"PlsCcaParams"],[3,"PlsSvd"],[3,"PlsSvdParams"],[3,"PlsRegression"],[3,"PlsCanonical"],[3,"PlsCca"]]},\
"linfa_preprocessing":{"doc":"Preprocessing","t":[14,0,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,13,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["column_for_word","count_vectorization","error","linear_scaling","norm_scaling","tf_idf_vectorization","whitening","CountVectorizer","FittedCountVectorizer","borrow","borrow","borrow_mut","borrow_mut","convert_to_lowercase","default","deref","deref","deref_mut","deref_mut","document_frequency","drop","drop","fit","fit_files","fit_vocabulary","from","from","init","init","into","into","n_gram_range","nentries","normalize","split_regex","stopwords","transform","transform_files","try_from","try_from","try_into","try_into","type_id","type_id","vocabulary","vzip","vzip","EncodingError","Error","FlippedDocumentFrequencies","FlippedMinMaxRange","FlippedNGramBoundaries","InvalidDocumentFrequencies","InvalidFloat","InvalidNGramBoundaries","IoError","LinalgError","LinfaError","NdarrayStatsEmptyError","NotEnoughSamples","RegexError","Result","TooManySubsamples","WrongMeasureForScaler","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","init","into","source","to_string","try_from","try_into","type_id","vzip","FittedLinearScaler","LinearScaler","MaxAbs","MinMax","ScalingMethod","Standard","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fit","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","max_abs","method","method","min_max","min_max_range","new","offsets","scales","standard","standard_no_mean","standard_no_std","to_owned","to_string","transform","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","NormScaler","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","l1","l2","max","transform","transform","try_from","try_into","type_id","vzip","FittedTfIdfVectorizer","NonSmooth","Smooth","Textbook","TfIdfMethod","TfIdfVectorizer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compute_idf","convert_to_lowercase","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","document_frequency","drop","drop","drop","fit","fit_files","fit_vocabulary","from","from","from","init","init","init","into","into","into","method","n_gram_range","nentries","normalize","split_regex","stopwords","to_owned","transform","transform_files","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vocabulary","vzip","vzip","vzip","Cholesky","FittedWhitener","Pca","Whitener","WhiteningMethod","Zca","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cholesky","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fit","from","from","from","init","init","init","into","into","into","mean","method","pca","transform","transform","transformation_matrix","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","zca"],"q":["linfa_preprocessing","","","","","","","linfa_preprocessing::count_vectorization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_preprocessing::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_preprocessing::linear_scaling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_preprocessing::norm_scaling","","","","","","","","","","","","","","","","","","linfa_preprocessing::tf_idf_vectorization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_preprocessing::whitening","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Count vectorization methods","Error definitions for preprocessing","Linear Scaling methods","Sample normalization methods","Term frequency - inverse document frequency vectorization …","Methods for uncorrelating data","Count vectorizer: learns a vocabulary from a sequence of …","Counts the occurrences of each vocabulary entry, learned …","","","","","If true, all documents used for fitting will be converted …","","","","","","Specifies the minimum and maximum (relative) document …","","","Learns a vocabulary from the documents in <code>x</code>, according to …","Learns a vocabulary from the documents contained in the …","Produces a FittedCountVectorizer with the input …","","","","","","","If set to <code>(1,1)</code> single tokens will be candidate …","Number of vocabulary entries learned during fitting","If true, all charachters in the documents used for …","Sets the regex espression used to split decuments into …","List of entries to be excluded from the generated …","Given a sequence of <code>n</code> documents, produces a sparse array …","Given a sequence of <code>n</code> file names, produces a sparse array …","","","","","","","Contains all vocabulary entries, in the same order used …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The result of fitting a linear scaler. Scales datasets …","Linear Scaler: learns scaling parameters, according to …","","","Possible scaling methods for LinearScaler","","","","","","","","","","","","","","","","","","","Fits the input dataset accordng to the scaler method. …","","","","","","","","","","","","","Initializes a MaxAbs scaler","Setter for the scaler method","Returns the method used for fitting. Useful for printing, …","Initializes a MinMax scaler with range [0,1]","Initializes a MinMax scaler with the specified minimum …","Initializes the scaler with the specified method.","Array of size <code>n_features</code> that contains the offset that …","Array of size <code>n_features</code> that contains the scale that …","Initializes a Standard scaler","Initializes a Standard scaler that does not subract the …","Initializes a Stadard scaler that does not scale the …","","","Scales an array of size (nsamples, nfeatures) according …","Substitutes the records of the dataset with their scaled …","","","","","","","","","","","","","Norm scaler: scales all samples in a dataset to have unit …","","","","","","","","","Initializes a norm scaler that uses l1 norm","Initializes a norm scaler that uses l2 norm","Initializes a norm scaler that uses max norm","Scales all samples in the array of shape (nsamples, …","Substitutes the records of the dataset with their scaled …","","","","","Counts the occurrences of each vocabulary entry, learned …","Computes the idf as <code>log(n/document_frequency) +1</code>. The “…","Computes the idf as <code>log(1+n/1+document_frequency) + 1</code>. …","Textbook definition of idf, computed as …","Methods for computing the inverse document frequency of a …","Simlar to <code>CountVectorizer</code> but instead of just counting …","","","","","","","","","","If true, all documents used for fitting will be converted …","","","","","","","","Specifies the minimum and maximum (relative) document …","","","","Learns a vocabulary from the texts in <code>x</code>, according to the …","","Produces a FittedTfIdfVectorizer with the input …","","","","","","","","","","Returns the inverse document frequency method used in the …","If set to <code>(1,1)</code> single tokens will be candidate …","Number of vocabulary entries learned during fitting","If true, all charachters in the documents used for …","Sets the regex espression used to split decuments into …","List of entries to be excluded from the generated …","","Given a sequence of <code>n</code> documents, produces an array of …","","","","","","","","","","","Constains all vocabulary entries, in the same order used …","","","","","Struct that can be used to whiten data. Data will be …","","Struct that can be fitted to the input data to obtain the …","","","","","","","","","Creates an instance of a Whitener that uses the cholesky …","","","","","","","","","","","","","","","","","","","","The means that will be subtracted to the features before …","","Creates an instance of a Whitener that uses the PCA method","","","The matrix used for scaling the data","","","","","","","","","","","","","Creates an instance of a Whitener that uses the ZCA …"],"i":[0,0,0,0,0,0,0,0,0,1,2,1,2,1,1,1,2,1,2,1,1,2,1,1,1,1,2,1,2,1,2,1,2,1,1,1,2,2,1,2,1,2,1,2,2,1,2,3,0,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,4,4,0,4,5,4,6,5,4,6,4,4,5,4,6,5,4,6,5,4,6,5,4,4,6,5,4,6,5,4,6,5,4,6,5,5,6,5,5,5,6,6,5,5,5,4,4,6,6,5,4,6,5,4,6,5,4,6,5,4,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,0,0,9,10,8,9,10,8,8,8,8,9,9,9,10,8,9,10,8,9,9,10,8,9,9,9,9,10,8,9,10,8,9,10,8,10,9,10,9,9,9,8,10,10,9,10,8,9,10,8,9,10,8,10,9,10,8,11,0,11,0,0,11,11,12,13,11,12,13,12,11,12,13,11,12,13,11,12,13,12,11,12,13,11,12,13,11,12,13,13,12,12,13,13,13,11,12,13,11,12,13,11,12,13,11,12,13,12],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["bool",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["f32",15]]],[[["usize",15]]],[[["usize",15]]],[[["arraybase",3]],[["result",6],["fittedcountvectorizer",3]]],[[["encodingref",6],["decodertrap",4]],[["result",6],["fittedcountvectorizer",3]]],[[],[["result",6],["fittedcountvectorizer",3]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["usize",15]]],[[],["usize",15]],[[["bool",15]]],[[["str",15]]],[[]],[[["arraybase",3]],[["csmat",6],["usize",15]]],[[["encodingref",6],["decodertrap",4]],[["csmat",6],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["vec",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["emptyinput",3]]],[[]],[[["error",4]]],[[["linalgerror",4]]],[[["error",3]]],[[["error",4]]],[[],["usize",15]],[[]],[[],[["option",4],["error",8]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["scalingmethod",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["datasetbase",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["scalingmethod",4]]],[[],["scalingmethod",4]],[[]],[[]],[[["scalingmethod",4]]],[[],["array1",6]],[[],["array1",6]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["array2",6]],["array2",6]],[[["arraybase",3],["datasetbase",3]],[["array2",6],["datasetbase",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["array2",6]],["array2",6]],[[["arraybase",3],["datasetbase",3]],[["array2",6],["datasetbase",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["tfidfmethod",4]],[[]],[[["usize",15]],["f64",15]],[[["bool",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["f32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["arraybase",3]],[["fittedtfidfvectorizer",3],["result",6]]],[[["encodingref",6],["decodertrap",4]],[["fittedtfidfvectorizer",3],["result",6]]],[[],[["fittedtfidfvectorizer",3],["result",6]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["tfidfmethod",4]],[[["usize",15]]],[[],["usize",15]],[[["bool",15]]],[[["str",15]]],[[]],[[]],[[["arraybase",3]],[["f64",15],["csmat",6]]],[[["encodingref",6],["decodertrap",4]],[["f64",15],["csmat",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["vec",3]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["datasetbase",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["arrayview1",6]],[[["whiteningmethod",4]]],[[]],[[["arraybase",3],["datasetbase",3]],[["array2",6],["datasetbase",3]]],[[["array2",6]],["array2",6]],[[],["arrayview2",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]]],"p":[[3,"CountVectorizer"],[3,"FittedCountVectorizer"],[4,"Error"],[4,"ScalingMethod"],[3,"LinearScaler"],[3,"FittedLinearScaler"],[3,"NormScaler"],[4,"TfIdfMethod"],[3,"TfIdfVectorizer"],[3,"FittedTfIdfVectorizer"],[4,"WhiteningMethod"],[3,"Whitener"],[3,"FittedWhitener"]]},\
"linfa_reduction":{"doc":"Dimensionality reduction techniques","t":[3,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,4,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5],"n":["DiffusionMap","diffusion_map","error","pca","utils","DiffusionMap","DiffusionMapParams","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","eigvals","embedding","embedding_size","estimate_clusters","from","from","init","init","into","into","params","steps","steps","transform","try_from","try_from","try_into","try_into","type_id","type_id","validate","vzip","vzip","Error","LinalgError","LinfaError","NotEnoughSamples","Result","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","init","into","source","to_string","try_from","try_into","type_id","vzip","Pca","PcaParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default_target","deref","deref","deref_mut","deref_mut","drop","drop","explained_variance","explained_variance_ratio","fit","fmt","from","from","init","init","into","into","params","predict","predict","predict","predict","predict_inplace","singular_values","to_owned","transform","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","whiten","generate_blob","generate_blobs","generate_convoluted_rings","generate_convoluted_rings2d","generate_swissroll","to_gaussian_similarity"],"q":["linfa_reduction","","","","","linfa_reduction::diffusion_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_reduction::error","","","","","","","","","","","","","","","","","","","","","","","linfa_reduction::pca","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_reduction::utils","","","","",""],"d":["Embedding of diffusion map technique","Diffusion Map","","Principal Component Analysis","","Embedding of diffusion map technique","Diffusion map hyperparameters","","","","","","","","","","","Return the eigenvalue of the diffusion operator","Return the embedding","","Estimate the number of clusters in this embedding (very …","","","","","","","Creates the set of default parameters","Set the number of steps in the diffusion operator","","Project a kernel matrix to its embedding","","","","","","","Validates the parameter","","","","","","","","","","","","","","","","","","","","","","","","","","Fitted Principal Component Analysis model","Pincipal Component Analysis parameters","","","","","","","","","","","","","","Return the amount of explained variance per element","Return the normalized amount of explained variance per …","","","","","","","","","Create default parameter set","","","","","","Return the singular values","","","","","","","","","","","Apply whitening to the embedding vector","Generate <code>blob_size</code> data points (a “blob”) around …","Given an input matrix <code>blob_centroids</code>, with shape …","","","Generates a three dimension swiss roll, centered at the …","Computes a similarity matrix with gaussian kernel and …"],"i":[0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,1,2,1,1,2,1,2,1,2,1,2,2,2,1,2,1,2,1,2,2,1,2,0,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,4,5,4,5,5,5,5,4,5,4,5,4,5,5,5,4,5,4,5,4,5,4,5,5,5,5,5,5,5,5,5,5,4,5,4,5,4,5,4,5,4,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["array1",6]],[[],["array2",6]],null,[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["usize",15]],["diffusionmapparams",3]],[[["usize",15]]],null,[[["kernel",6]],[["diffusionmap",3],["result",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",6]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",4]]],[[["linalgerror",4]]],[[]],[[],["usize",15]],[[]],[[],[["option",4],["error",8]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["pca",3]],[[]],[[["arraybase",3]],["array2",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["f64",15],["array1",6]]],[[],[["f64",15],["array1",6]]],[[["datasetbase",3]],[["pca",3],["result",6]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["usize",15]],["pcaparams",3]],[[["arraybase",3]]],[[["arraybase",3],["dim",3]],[["datasetbase",3],["arraybase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["datasetbase",3]]],[[["arraybase",3],["array2",6]]],[[],["array1",6]],[[]],[[["datasetbase",3],["arraybase",3]],[["array2",6],["datasetbase",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["bool",15]]],[[["usize",15],["arraybase",3]],[["array2",6],["f64",15]]],[[["usize",15],["arraybase",3]],[["array2",6],["f64",15]]],[[["usize",15]],[["array2",6],["f64",15]]],[[["usize",15]],[["array2",6],["f64",15]]],[[["f64",15],["usize",15]],[["array2",6],["f64",15]]],[[["f64",15],["arraybase",3]],[["array2",6],["f64",15]]]],"p":[[3,"DiffusionMap"],[3,"DiffusionMapParams"],[4,"Error"],[3,"PcaParams"],[3,"Pca"]]},\
"linfa_svm":{"doc":"Support Vector Machines","t":[4,13,13,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,6,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ExitReason","ReachedIterations","ReachedThreshold","Svm","SvmParams","alpha","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","c_eps","default_target","default_target","default_target","default_target","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eps","error","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fmt","fmt","from","from","from","gaussian_kernel","init","init","init","into","into","into","linear_kernel","nsupport","nu_eps","nu_weight","params","polynomial_kernel","pos_neg_weights","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict_inplace","predict_inplace","predict_inplace","predict_inplace","rho","shrinking","solver_smo","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","weighted_sum","with_kernel_params","with_platt_params","BaseCrate","Platt","Result","SvmResult","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","init","into","source","to_string","try_from","try_into","type_id","vzip","Linear","SeparatingHyperplane","SolverParams","SolverState","WeightedCombination","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bound","calculate_rho","calculate_rho_nu","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","do_shrinking","do_shrinking_nu","drop","drop","drop","eps","from","from","from","init","init","init","into","into","into","max_violating_pair","max_violating_pair_nu","nactive","new","ntotal","select_working_set","select_working_set_nu","should_shrunk","should_shrunk_nu","shrinking","solve","swap","target","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","vzip","vzip","vzip"],"q":["linfa_svm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_svm::error","","","","","","","","","","","","","","","","","","","","","","linfa_svm::solver_smo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Reason for stopping","","","Fitted Support Vector Machines model","SVM Hyperparameters","","","","","","","","Set the C value for regression","","","","","","","","","","","","","","Set stopping condition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the model to use the Gaussian kernel. For this …","","","","","","","Sets the model to use the Linear kernel. For this kernel …","Returns the number of support vectors","Set the Nu-Eps value for regression","Set the Nu value for classification","Create hyper parameter set","Sets the model to use the Polynomial kernel. For this …","Set the C value for positive and negative samples.","","","","","","","","","","","","","","","","Shrink active variable set","","","","","","","","","","","","","","","Sums the inner product of <code>sample</code> and every one of the …","Set the kernel to use for training","Set the platt params for probability calibration","","","","","","","","","","","","","","","","","","","","","","","","","Parameters of the solver routine","Current state of the SMO solver","","","","","","","","Return the k-th bound","","","","","","","","","","","","","","","","Stopping condition","","","","","","","","","","Return max and min gradients of free variables","","Return number of active variables","Initialize a solver state","Return number of total variables","Select optimal working set","Select optimal working set","","","Should we shrink, e.g. ignore bounded alphas","","Swap two variables","Return target as positive/negative indicator","","","","","","","","","","","","","",""],"i":[0,1,1,0,0,2,3,2,1,3,2,1,3,2,2,2,2,3,2,1,3,2,1,3,2,1,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,3,2,1,3,3,2,1,3,2,1,3,2,3,3,2,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,0,2,3,2,1,3,2,1,3,2,1,3,2,1,2,3,3,4,4,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,0,0,0,5,5,6,7,5,6,7,6,6,6,7,7,5,6,7,5,6,7,6,6,5,6,7,7,5,6,7,5,6,7,5,6,7,6,6,6,6,6,6,6,6,6,7,6,6,6,7,5,6,7,5,6,7,5,6,7,6,5,6,7],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["arraybase",3]],[["f64",15],["array1",6]]],[[["arraybase",3]],[["array1",6],["pr",3]]],[[["arraybase",3]],[["array1",6],["bool",15]]],[[["arraybase",3]],[["array1",6],["f32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],null,[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["datasetbase",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["svmparams",3]],[[]],[[]],[[["arrayview1",6],["f32",15]],["f32",15]],[[["datasetbase",3]]],[[["arrayview1",6],["f64",15]],["f64",15]],[[["arraybase",3]]],[[["dim",3],["arraybase",3]],[["arraybase",3],["datasetbase",3]]],[[["datasetbase",3]],["datasetbase",3]],[[["f64",15],["array1",6]],["f64",15]],[[["array1",6],["f32",15]],["f32",15]],[[["ix1",6],["arraybase",3]],["bool",15]],[[["ix1",6],["arraybase",3]],["pr",3]],[[["arraybase",3],["array1",6]]],[[["arraybase",3],["array1",6]]],[[["array1",6],["arraybase",3]]],[[["array1",6],["arraybase",3]]],null,[[["bool",15]]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["arraybase",3]]],[[["kernelparams",3]]],[[["plattparams",3]]],null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["plattnewtonresult",4]]],[[["error",4]]],[[]],[[],["usize",15]],[[]],[[],[["error",8],["option",4]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[],["solverparams",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["vec",3],["bool",15],["solverparams",3],["vec",3],["arrayview2",6]],["solverstate",3]],[[],["usize",15]],[[]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],null,[[],["svm",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]]],"p":[[4,"ExitReason"],[3,"Svm"],[3,"SvmParams"],[4,"SvmResult"],[4,"SeparatingHyperplane"],[3,"SolverState"],[3,"SolverParams"]]},\
"linfa_trees":{"doc":"Decision tree learning","t":[3,3,13,13,3,6,4,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,12,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DecisionTree","DecisionTreeParams","Entropy","Gini","NodeIter","Result","SplitQuality","Tikz","TreeNode","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","clone","clone","clone","clone_into","clone_into","clone_into","complete","default_target","depth","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","export_to_tikz","feature_importance","feature_name","features","fit","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","init","init","init","init","init","init","into","into","into","into","into","into","into_iter","is_leaf","iter_nodes","max_depth","max_depth","max_depth","mean_impurity_decrease","min_impurity_decrease","min_impurity_decrease","min_weight_leaf","min_weight_leaf","min_weight_split","min_weight_split","new","new","next","num_leaves","params","phantom","predict","predict","predict","predict","predict_inplace","prediction","relative_impurity_decrease","root_node","split","split_quality","split_quality","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","validate","vzip","vzip","vzip","vzip","vzip","vzip","with_legend"],"q":["linfa_trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A fitted decision tree model for classification.","The set of hyperparameters that can be specified for …","Measures the entropy of a subtree, defined as the sum …","Measures the degree of probability of a randomly chosen …","Level-order (BFT) iterator of nodes in a decision tree","","The metric used to determine the feature by which a node …","Struct to print a fitted decision tree in Tex using tikz …","A node in the decision tree","","","","","","","","","","","","","Returns both children, first left then right","","","","","","","Whether a complete Tex document should be generated","","Returns the depth of the node in the decision tree","","","","","","","","","","","","","","","","","","","","Generates a <code>Tikz</code> structure to print the fitted tree in …","Return the feature importance, i.e. the relative impurity …","Returns the name of the feature used in the split if the …","Return features_idx of this tree (BFT)","Fit a decision tree using <code>hyperparamters</code> on the dataset …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the node has no children","Create a node iterator in level-order (BFT)","Return max depth of the tree","Sets the optional limit to the depth of the decision tree","","Return the mean impurity decrease for each feature","Sets the minimum decrease in impurity that a split needs …","","Sets the minimum weight of samples that a split has to …","","Sets the minimum weight of samples required to split a …","","","Creates a new Tikz structure for the decision tree with …","","Return the number of leaves in this tree","Defaults are provided if the optional parameters are not …","","","","","","Make predictions for each row of a matrix of features <code>x</code>.","Returns <code>Some(prediction)</code> for leaf nodes and <code>None</code> for …","Return the relative impurity decrease for each feature","Return root node of the tree","Return the split (feature index, value) and its impurity …","Sets the metric used to decide the feature on which to …","","","","","","","","","","","","","","","","","","","","","","","","Checks the correctness of the hyperparameters","","","","","","","Add a legend to the generated tree"],"i":[0,0,1,1,0,0,0,0,0,2,3,4,5,1,6,2,3,4,5,1,6,4,4,1,6,4,1,6,3,5,4,2,3,4,5,1,6,2,3,4,5,1,6,2,3,4,5,1,6,4,5,5,4,5,6,3,4,5,1,6,2,3,4,5,1,6,4,2,3,4,5,1,6,2,3,4,5,1,6,2,4,5,5,6,6,5,6,6,6,6,6,6,2,3,2,5,5,6,5,5,5,5,5,4,5,5,4,6,6,4,1,6,3,2,3,4,5,1,6,2,3,4,5,1,6,2,3,4,5,1,6,6,2,3,4,5,1,6,3],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3],["option",4]]],[[],["treenode",3]],[[],["splitquality",4]],[[],["decisiontreeparams",3]],[[]],[[]],[[]],[[["bool",15]]],[[["arraybase",3]],["array1",6]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[],["tikz",3]],[[],["vec",3]],[[],[["option",4],["string",3]]],[[],[["vec",3],["usize",15]]],[[["datasetbase",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["nodeiter",3]],[[],["usize",15]],[[["usize",15],["option",4]]],null,[[],["vec",3]],[[]],null,[[["f32",15]]],null,[[["f32",15]]],null,[[["treenode",3],["vec",3]]],[[["decisiontree",3]]],[[],["option",4]],[[],["usize",15]],[[],["decisiontreeparams",3]],null,[[["datasetbase",3]],["datasetbase",3]],[[["dim",3],["arraybase",3]],[["datasetbase",3],["arraybase",3]]],[[["arraybase",3]]],[[["datasetbase",3]]],[[["array1",6],["arraybase",3]]],[[],["option",4]],[[],["vec",3]],[[],["treenode",3]],[[]],[[["splitquality",4]]],null,[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"SplitQuality"],[3,"NodeIter"],[3,"Tikz"],[3,"TreeNode"],[3,"DecisionTree"],[3,"DecisionTreeParams"]]},\
"linfa_tsne":{"doc":"t-distributed stochastic neighbor embedding","t":[13,13,13,13,13,13,13,6,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BaseCrate","EmbeddingSizeTooLarge","InvalidShape","NegativeApproximationThreshold","NegativePerplexity","PerplexityTooLarge","PreliminaryIterationsTooLarge","Result","TSne","TSneError","approx_threshold","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","embedding_size","embedding_size_with_rng","fmt","fmt","from","from","from","from","init","init","into","into","max_iter","perplexity","preliminary_iter","source","to_string","transform","transform","try_from","try_from","try_into","try_into","type_id","type_id","validate","vzip","vzip"],"q":["linfa_tsne","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","The t-SNE algorithm is a statistical method for …","","Set the approximation threshold of the Barnes Hut …","","","","","","","","","","","Create a t-SNE param set with given embedding size","Create a t-SNE param set with given embedding size and …","","","","","","","","","","","Set the maximal number of iterations","Set the perplexity of the t-SNE algorithm","Set the number of iterations after which the true P …","","","","","","","","","","","Validates parameters","",""],"i":[1,1,1,1,1,1,1,0,0,0,2,2,1,2,1,2,1,2,1,2,1,2,2,1,1,2,1,1,1,2,1,2,1,2,2,2,1,1,2,2,2,1,2,1,2,1,2,2,1],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["smallrng",3],["tsne",3]]],[[["usize",15]],["tsne",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["shapeerror",3]]],[[["error",4]]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[],[["error",8],["option",4]]],[[],["string",3]],[[["datasetbase",3],["array2",6]],[["datasetbase",3],["result",6]]],[[["array2",6]],[["array2",6],["result",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["result",6]],[[]],[[]]],"p":[[4,"TSneError"],[3,"TSne"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};